{"ast":null,"code":"var _jsxFileName = \"/Users/hasanshaikh/Documents/GitHub/qkart/frontend/src/components/Cart.js\";\nimport { ShoppingCartOutlined } from \"@ant-design/icons\";\nimport { Button, Card, message, Spin, InputNumber } from \"antd\";\nimport React from \"react\";\nimport { config } from \"../App\";\nimport \"./Cart.css\";\n\n/**\n * @typedef {Object} Product\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} CartItem\n * @property {string} productId - Unique ID for the product\n * @property {number} qty - Quantity of the product in cart\n * @property {Product} product - Corresponding product object for that cart item\n */\n\n/**\n * @class Cart component handles functionality for the display and manipulation of the customer's shopping cart\n *\n * Contains the following fields\n * @property {Product[]} props.products\n *    List of all available products (that the cart items can be from)\n * @property {{ push: function }} props.history\n *    To navigate and redirect the user to different routes or pages\n * @property {string} props.token\n *    Oauth token for authentication for API calls\n * @property {boolean|undefined} props.checkout\n *    Denotes if the Cart component is created in the Checkout component\n * @property {CartItem[]} state.items\n *    List of items currently in cart\n * @property {boolean} state.loading\n *    Indicates background action pending completion. When true, further UI actions might be blocked\n */\nexport default class Cart extends React.Component {\n  constructor() {\n    super();\n    /**\n     * Check the response of the API call to be valid and handle any failures along the way\n     *\n     * @param {boolean} errored\n     *    Represents whether an error occurred in the process of making the API call itself\n     * @param {{ productId: string, qty: number }|{ success: boolean, message?: string }} response\n     *    The response JSON object which may contain further success or error messages\n     * @returns {boolean}\n     *    Whether validation has passed or not\n     *\n     * If the API call itself encounters an error, errored flag will be true.\n     * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n     * When there is an error in the API call itself, display a generic error message and return false.\n     * When there is an error returned by backend, display the given message field and return false.\n     * When there is no error and API call is successful, return true.\n     */\n    this.validateResponse = (errored, response) => {\n      if (errored) {\n        message.error(\"Could not update cart. Check that the backend is running, reachable and returns valid JSON.\");\n        return false;\n      } else if (response.message) {\n        message.error(response.message);\n        return false;\n      }\n      return true;\n    };\n    /**\n     * Perform the API call to fetch the user's cart and return the response\n     *\n     * @returns {{ productId: string, qty: number }|{ success: boolean, message?: string }}\n     *    The response JSON object\n     *\n     * -    Set the loading state variable to true\n     * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n     * -    The call must be made asynchronously using Promises or async/await\n     * -    The call must be authenticated with an authorization header containing Oauth token\n     * -    The call must handle any errors thrown from the fetch call\n     * -    Parse the result as JSON\n     * -    Set the loading state variable to false once the call has completed\n     * -    Call the validateResponse(errored, response) function defined previously\n     * -    If response passes validation, return the response object\n     *\n     * Example for successful response from backend:\n     * HTTP 200\n     * [\n     *      {\n     *          \"productId\": \"KCRwjF7lN97HnEaY\",\n     *          \"qty\": 3\n     *      },\n     *      {\n     *          \"productId\": \"BW0jAAeDJmlZCF8i\",\n     *          \"qty\": 1\n     *      }\n     * ]\n     *\n     * Example for failed response from backend:\n     * HTTP 401\n     * {\n     *      \"success\": false,\n     *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n     * }\n     */\n    this.getCart = async () => {\n      let response = {};\n      let errored = false;\n      this.setState({\n        loading: true\n      });\n      try {\n        response = await (await fetch(`${config.endpoint}/cart`, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${this.props.token}`\n          }\n        })).json();\n      } catch (e) {\n        errored = true;\n      }\n      this.setState({\n        loading: false\n      });\n      if (this.validateResponse(errored, response)) {\n        return response;\n      }\n    };\n    /**\n     * Perform the API call to add or update items in the user's cart\n     *\n     * @param {string} productId\n     *    ID of the product that is to be added or updated in cart\n     * @param {number} qty\n     *    How many of the product should be in the cart\n     * @param {boolean} fromAddToCartButton\n     *    If this function was triggered from the product card's \"Add to Cart\" button\n     *\n     * -    If the user is trying to add from the product card and the product already exists in cart, show an error message\n     * -    Set the loading state variable to true\n     * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n     * -    The call must be made asynchronously using Promises or async/await\n     * -    The call must be authenticated with an authorization header containing Oauth token\n     * -    The call must handle any errors thrown from the fetch call\n     * -    Parse the result as JSON\n     * -    Set the loading state variable to false once the call has completed\n     * -    Call the validateResponse(errored, response) function defined previously\n     * -    If response passes validation, refresh the cart by calling refreshCart()\n     *\n     * Example for successful response from backend:\n     * HTTP 200\n     * {\n     *      \"success\": true\n     * }\n     *\n     * Example for failed response from backend:\n     * HTTP 404\n     * {\n     *      \"success\": false,\n     *      \"message\": \"Product doesn't exist\"\n     * }\n     */\n    this.postToCart = async (productId, qty) => {\n      let response = {};\n      let errored = false;\n      let statusCode;\n      this.setState({\n        loading: true\n      });\n      try {\n        response = await (await fetch(`${config.endpoint}/cart`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${this.props.token}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            productId: productId,\n            quantity: qty\n          })\n        })).json();\n      } catch (e) {\n        errored = true;\n      }\n      this.setState({\n        loading: false\n      });\n      if (this.validateResponse(errored, response, statusCode)) {\n        await this.refreshCart();\n      }\n    };\n    this.putToCart = async (productId, qty) => {\n      let response = {};\n      let errored = false;\n      let statusCode;\n      this.setState({\n        loading: true\n      });\n      try {\n        let response_object = await fetch(`${config.endpoint}/cart`, {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${this.props.token}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            productId: productId,\n            quantity: qty\n          })\n        });\n        statusCode = response_object.status;\n        if (statusCode !== 204) {\n          response = await response_object.json();\n        }\n      } catch (e) {\n        errored = true;\n      }\n      this.setState({\n        loading: false\n      });\n      if (statusCode === \"204\" || this.validateResponse(errored, response, statusCode)) {\n        await this.refreshCart();\n      }\n    };\n    /**\n     * Function to get/refresh list of items in cart from backend and update state variable\n     * -    Call the previously defined getCart() function asynchronously and capture the returned value in a variable\n     * -    If the returned value exists,\n     *      -   Update items state variable with the response (optionally add the corresponding product object of that item as a sub-field)\n     \n     * -    If the cart is being displayed from the checkout page, or the cart is empty,\n     *      -   Display an error message\n     *      -   Redirect the user to the products listing page\n     \n     */\n    this.refreshCart = async () => {\n      const cart = await this.getCart();\n      if (cart === null || cart === void 0 ? void 0 : cart.cartItems) {\n        this.setState({\n          items: cart.cartItems.map(item => ({\n            ...item,\n            product: this.props.products.find(product => product._id === item.product._id)\n          }))\n        });\n      }\n    };\n    /**\n     * Function to calculate the total cost of items in cart\n     * -    Iterate over objects and return the total cost by taking an cost of item in cart, multiplying it with its quantity and cumulatively adding to a total\n     *\n     * @returns {number}\n     *  The final total cost of the user's shopping cart\n     */\n    this.calculateTotal = () => {\n      return this.state.items.length ? this.state.items.reduce((total, item) => total + item.product.cost * item.quantity, 0) : 0;\n    };\n    /**\n     * Creates the view for the product quantity added to cart\n     *\n     * @param {CartItem} item\n     * @returns {JSX}\n     *    HTML and JSX to be rendered\n     */\n    this.getQuantityElement = item => {\n      return this.props.checkout ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cart-item-qty-fixed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cart-item-qty-fixed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 9\n        }\n      }, \"Qty: \", item.quantity)) : /*#__PURE__*/React.createElement(InputNumber, {\n        min: 0,\n        max: 10,\n        defaultValue: item.quantity,\n        onChange: value => {\n          this.putToCart(item.product._id, value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 7\n        }\n      });\n    };\n    this.state = {\n      items: [],\n      loading: false\n    };\n  }\n  /**\n   * Function that runs when component has loaded\n   * This is the function that is called when the page loads the cart component\n   * We can call refreshCart() here to get the cart items\n   */\n\n  componentDidMount() {\n    this.refreshCart();\n  }\n  /**\n   * JSX and HTML goes here\n   * To iterate over the cart items list and display each item as a component\n   * -    Should display name, image, cost\n   * -    Should have a way to select and update the quantity of the item\n   * Total cost of all items needs to be displayed as well\n   * We also need a button to take the user to the checkout page\n   * If cart items do not exist, show appropriate text\n   */\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: [\"cart\", this.props.checkout ? \"checkout\" : \"\"].join(\" \"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 7\n      }\n    }, this.state.items.length ? /*#__PURE__*/React.createElement(React.Fragment, null, this.state.items.map(item => item.quantity != 0 && /*#__PURE__*/React.createElement(Card, {\n      className: \"cart-item\",\n      key: item.productId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"cart-item-image\",\n      alt: item.product.name,\n      src: item.product.image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cart-parent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cart-item-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cart-item-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 23\n      }\n    }, item.product.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cart-item-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 23\n      }\n    }, item.product.category)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cart-item-cost\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 21\n      }\n    }, \"\\u20B9\", item.product.cost * item.quantity)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cart-item-qty\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 19\n      }\n    }, this.getQuantityElement(item))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"total\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 15\n      }\n    }, \"Total\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"total-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 17\n      }\n    }, \"Products\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 17\n      }\n    }, this.state.items.reduce(function (sum, item) {\n      return sum + item.quantity;\n    }, 0))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"total-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 17\n      }\n    }, \"Sub Total\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 17\n      }\n    }, \"\\u20B9\", this.calculateTotal())), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"total-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 17\n      }\n    }, \"Shipping\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 17\n      }\n    }, \"N/A\")), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"total-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 17\n      }\n    }, \"Total\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 17\n      }\n    }, \"\\u20B9\", this.calculateTotal())))) :\n    /*#__PURE__*/\n    // Display a static text banner if cart is empty\n    React.createElement(\"div\", {\n      className: \"loading-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 11\n      }\n    }, \"Add an item to cart and it will show up here\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 13\n      }\n    })), !this.props.checkout && /*#__PURE__*/React.createElement(Button, {\n      className: \"ant-btn-warning\",\n      type: \"primary\",\n      icon: /*#__PURE__*/React.createElement(ShoppingCartOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 19\n        }\n      }),\n      onClick: () => {\n        // if (this.state.items.length) {\n        this.props.history.push(\"/checkout\");\n        // } else {\n        // message.error(\"You must add items to cart first\");\n        // }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 13\n      }\n    }, \" Checkout\")), this.state.loading && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading-overlay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Spin, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 13\n      }\n    })));\n  }\n}","map":{"version":3,"names":["ShoppingCartOutlined","Button","Card","message","Spin","InputNumber","React","config","Cart","Component","constructor","validateResponse","errored","response","error","getCart","setState","loading","fetch","endpoint","method","headers","Authorization","props","token","json","e","postToCart","productId","qty","statusCode","body","JSON","stringify","quantity","refreshCart","putToCart","response_object","status","cart","cartItems","items","map","item","product","products","find","_id","calculateTotal","state","length","reduce","total","cost","getQuantityElement","checkout","createElement","Fragment","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","min","max","defaultValue","onChange","value","componentDidMount","render","join","key","alt","name","src","image","category","sum","type","icon","onClick","history","push","size"],"sources":["/Users/hasanshaikh/Documents/GitHub/qkart/frontend/src/components/Cart.js"],"sourcesContent":["import { ShoppingCartOutlined } from \"@ant-design/icons\";\nimport { Button, Card, message, Spin, InputNumber } from \"antd\";\nimport React from \"react\";\nimport { config } from \"../App\";\nimport \"./Cart.css\";\n\n/**\n * @typedef {Object} Product\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} CartItem\n * @property {string} productId - Unique ID for the product\n * @property {number} qty - Quantity of the product in cart\n * @property {Product} product - Corresponding product object for that cart item\n */\n\n/**\n * @class Cart component handles functionality for the display and manipulation of the customer's shopping cart\n *\n * Contains the following fields\n * @property {Product[]} props.products\n *    List of all available products (that the cart items can be from)\n * @property {{ push: function }} props.history\n *    To navigate and redirect the user to different routes or pages\n * @property {string} props.token\n *    Oauth token for authentication for API calls\n * @property {boolean|undefined} props.checkout\n *    Denotes if the Cart component is created in the Checkout component\n * @property {CartItem[]} state.items\n *    List of items currently in cart\n * @property {boolean} state.loading\n *    Indicates background action pending completion. When true, further UI actions might be blocked\n */\nexport default class Cart extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      items: [],\n      loading: false,\n    };\n  }\n\n  /**\n   * Check the response of the API call to be valid and handle any failures along the way\n   *\n   * @param {boolean} errored\n   *    Represents whether an error occurred in the process of making the API call itself\n   * @param {{ productId: string, qty: number }|{ success: boolean, message?: string }} response\n   *    The response JSON object which may contain further success or error messages\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * If the API call itself encounters an error, errored flag will be true.\n   * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n   * When there is an error in the API call itself, display a generic error message and return false.\n   * When there is an error returned by backend, display the given message field and return false.\n   * When there is no error and API call is successful, return true.\n   */\n  validateResponse = (errored, response) => {\n    if (errored) {\n      message.error(\n        \"Could not update cart. Check that the backend is running, reachable and returns valid JSON.\"\n      );\n      return false;\n    } else if (response.message) {\n      message.error(response.message);\n      return false;\n    }\n\n    return true;\n  };\n\n  /**\n   * Perform the API call to fetch the user's cart and return the response\n   *\n   * @returns {{ productId: string, qty: number }|{ success: boolean, message?: string }}\n   *    The response JSON object\n   *\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   * -    The call must be made asynchronously using Promises or async/await\n   * -    The call must be authenticated with an authorization header containing Oauth token\n   * -    The call must handle any errors thrown from the fetch call\n   * -    Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateResponse(errored, response) function defined previously\n   * -    If response passes validation, return the response object\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"productId\": \"KCRwjF7lN97HnEaY\",\n   *          \"qty\": 3\n   *      },\n   *      {\n   *          \"productId\": \"BW0jAAeDJmlZCF8i\",\n   *          \"qty\": 1\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  getCart = async () => {\n    let response = {};\n    let errored = false;\n\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      response = await (\n        await fetch(`${config.endpoint}/cart`, {\n          method: \"GET\",\n\n          headers: {\n            Authorization: `Bearer ${this.props.token}`,\n          },\n        })\n      ).json();\n    } catch (e) {\n      errored = true;\n    }\n\n    this.setState({\n      loading: false,\n    });\n\n    if (this.validateResponse(errored, response)) {\n      return response;\n    }\n  };\n\n  /**\n   * Perform the API call to add or update items in the user's cart\n   *\n   * @param {string} productId\n   *    ID of the product that is to be added or updated in cart\n   * @param {number} qty\n   *    How many of the product should be in the cart\n   * @param {boolean} fromAddToCartButton\n   *    If this function was triggered from the product card's \"Add to Cart\" button\n   *\n   * -    If the user is trying to add from the product card and the product already exists in cart, show an error message\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   * -    The call must be made asynchronously using Promises or async/await\n   * -    The call must be authenticated with an authorization header containing Oauth token\n   * -    The call must handle any errors thrown from the fetch call\n   * -    Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateResponse(errored, response) function defined previously\n   * -    If response passes validation, refresh the cart by calling refreshCart()\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * {\n   *      \"success\": true\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 404\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Product doesn't exist\"\n   * }\n   */\n  postToCart = async (productId, qty) => {\n    let response = {};\n    let errored = false;\n    let statusCode;\n\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      response = await (\n        await fetch(`${config.endpoint}/cart`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${this.props.token}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            productId: productId,\n            quantity: qty,\n          }),\n        })\n      ).json();\n    } catch (e) {\n      errored = true;\n    }\n\n    this.setState({\n      loading: false,\n    });\n\n    if (this.validateResponse(errored, response, statusCode)) {\n      await this.refreshCart();\n    }\n  };\n\n  putToCart = async (productId, qty) => {\n    let response = {};\n    let errored = false;\n    let statusCode;\n\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      let response_object = await fetch(`${config.endpoint}/cart`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${this.props.token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          productId: productId,\n          quantity: qty,\n        }),\n      });\n\n      statusCode = response_object.status;\n      if (statusCode !== 204) {\n        response = await response_object.json();\n      }\n    } catch (e) {\n      errored = true;\n    }\n\n    this.setState({\n      loading: false,\n    });\n\n    if (\n      statusCode === \"204\" ||\n      this.validateResponse(errored, response, statusCode)\n    ) {\n      await this.refreshCart();\n    }\n  };\n  /**\n   * Function to get/refresh list of items in cart from backend and update state variable\n   * -    Call the previously defined getCart() function asynchronously and capture the returned value in a variable\n   * -    If the returned value exists,\n   *      -   Update items state variable with the response (optionally add the corresponding product object of that item as a sub-field)\n   \n   * -    If the cart is being displayed from the checkout page, or the cart is empty,\n   *      -   Display an error message\n   *      -   Redirect the user to the products listing page\n   \n   */\n  refreshCart = async () => {\n    const cart = await this.getCart();\n\n    if (cart?.cartItems) {\n      this.setState({\n        items: cart.cartItems.map((item) => ({\n          ...item,\n          product: this.props.products.find(\n            (product) => product._id === item.product._id\n          ),\n        })),\n      });\n    }\n  };\n\n  /**\n   * Function to calculate the total cost of items in cart\n   * -    Iterate over objects and return the total cost by taking an cost of item in cart, multiplying it with its quantity and cumulatively adding to a total\n   *\n   * @returns {number}\n   *  The final total cost of the user's shopping cart\n   */\n  calculateTotal = () => {\n    return this.state.items.length\n      ? this.state.items.reduce(\n          (total, item) => total + item.product.cost * item.quantity,\n          0\n        )\n      : 0;\n  };\n\n  /**\n   * Function that runs when component has loaded\n   * This is the function that is called when the page loads the cart component\n   * We can call refreshCart() here to get the cart items\n   */\n\n  componentDidMount() {\n    this.refreshCart();\n  }\n\n  /**\n   * Creates the view for the product quantity added to cart\n   *\n   * @param {CartItem} item\n   * @returns {JSX}\n   *    HTML and JSX to be rendered\n   */\n  getQuantityElement = (item) => {\n    return this.props.checkout ? (\n      <>\n        <div className=\"cart-item-qty-fixed\"></div>\n        <div className=\"cart-item-qty-fixed\">Qty: {item.quantity}</div>\n      </>\n    ) : (\n      <InputNumber\n        min={0}\n        max={10}\n        defaultValue={item.quantity}\n        onChange={(value) => {\n          this.putToCart(item.product._id, value);\n        }}\n      />\n    );\n  };\n\n  /**\n   * JSX and HTML goes here\n   * To iterate over the cart items list and display each item as a component\n   * -    Should display name, image, cost\n   * -    Should have a way to select and update the quantity of the item\n   * Total cost of all items needs to be displayed as well\n   * We also need a button to take the user to the checkout page\n   * If cart items do not exist, show appropriate text\n   */\n  render() {\n    return (\n      <div\n        className={[\"cart\", this.props.checkout ? \"checkout\" : \"\"].join(\" \")}\n      >\n        {/* Display cart items or a text banner if cart is empty */}\n        {this.state.items.length ? (\n          <>\n            {/* Display a card view for each product in the cart */}\n            {this.state.items.map((item) => (\n              item.quantity != 0 &&\n              (<Card className=\"cart-item\" key={item.productId}>\n                {/* Display product image */}\n                <img\n                  className=\"cart-item-image\"\n                  alt={item.product.name}\n                  src={item.product.image}\n                />\n\n                {/* Display product details*/}\n                <div className=\"cart-parent\">\n                  {/* Display product name, category and total cost */}\n                  <div className=\"cart-item-info\">\n                    <div>\n                      <div className=\"cart-item-name\">{item.product.name}</div>\n\n                      <div className=\"cart-item-category\">\n                        {item.product.category}\n                      </div>\n                    </div>\n\n                    <div className=\"cart-item-cost\">\n                      ₹{item.product.cost * item.quantity}\n                    </div>\n                  </div>\n\n                  {/* Display field to update quantity or a static quantity text */}\n                  <div className=\"cart-item-qty\">\n                    {this.getQuantityElement(item)}\n                  </div>\n                </div>\n              </Card>)\n            ))}\n\n            {/* Display cart summary */}\n            <div className=\"total\">\n              <h2>Total</h2>\n\n              {/* Display net quantity of items in the cart */}\n              <div className=\"total-item\">\n                <div>Products</div>\n                <div>\n                  {this.state.items.reduce(function (sum, item) {\n                    return sum + item.quantity;\n                  }, 0)}\n                </div>\n              </div>\n\n              {/* Display the total cost of items in the cart */}\n              <div className=\"total-item\">\n                <div>Sub Total</div>\n                <div>₹{this.calculateTotal()}</div>\n              </div>\n\n              {/* Display shipping cost */}\n              <div className=\"total-item\">\n                <div>Shipping</div>\n                <div>N/A</div>\n              </div>\n              <hr></hr>\n\n              {/* Display the sum user has to pay while checking out */}\n              <div className=\"total-item\">\n                <div>Total</div>\n                <div>₹{this.calculateTotal()}</div>\n              </div>\n            </div>\n          </>\n        ) : (\n          // Display a static text banner if cart is empty\n          <div className=\"loading-text\">\n            Add an item to cart and it will show up here\n            <br />\n            <br />\n          </div>\n        )}\n\n        {/* Display a \"Checkout\" button */}\n\n        {!this.props.checkout && (\n          <Button\n            className=\"ant-btn-warning\"\n            type=\"primary\"\n            icon={<ShoppingCartOutlined />}\n            onClick={() => {\n              // if (this.state.items.length) {\n              this.props.history.push(\"/checkout\");\n              // } else {\n              // message.error(\"You must add items to cart first\");\n              // }\n            }}\n          >\n            <strong> Checkout</strong>\n          </Button>\n        )}\n\n        {/* Display a loading icon if the \"loading\" state variable is true */}\n        {this.state.loading && (\n          <div className=\"loading-overlay\">\n            <Spin size=\"large\" />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}