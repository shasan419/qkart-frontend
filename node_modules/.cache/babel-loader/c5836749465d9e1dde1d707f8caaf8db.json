{"ast":null,"code":"var _jsxFileName = \"/Users/hasanshaikh/Documents/GitHub/qkart/frontend/src/components/Register.js\";\nimport { LockOutlined, UserOutlined, MailOutlined } from \"@ant-design/icons\";\nimport { Button, Input, message } from \"antd\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\n\n/**\n * @class Register component handles the Register page UI and functionality\n *\n * Contains the following fields\n *\n * @property {boolean} state.loading\n *    Indicates background action pending completion. When true, further UI actions might be blocked\n * @property {string} state.username\n *    User given field for username\n * @property {string} state.password\n *    User given field for password\n * @property {string} state.confirmPassword\n *    User given field for retyping and confirming password\n */\nclass Register extends React.Component {\n  constructor() {\n    super();\n    /**\n     * Validate the input values so that any bad or illegal values are not passed to the backend.\n     *\n     * @returns {boolean}\n     *    Whether validation has passed or not\n     *\n     * Return false if any validation condition fails, otherwise return true.\n     * -    Check that username field is not an empty value\n     * -    Check that username field is not less than 6 characters in length\n     * -    Check that username field is not more than 32 characters in length\n     * -    Check that password field is not an empty value\n     * -    Check that password field is not less than 6 characters in length\n     * -    Check that password field is not more than 32 characters in length\n     * -    Check that confirmPassword field has the same value as password field\n     */\n    this.validateInput = () => {\n      if (!this.state.username) {\n        message.error(\"Username is a required field\");\n        return false;\n      }\n      if (this.state.username.length < 6) {\n        message.error(\"Username must be at least 6 characters\");\n        return false;\n      }\n      if (this.state.username.length > 32) {\n        message.error(\"Username must be at most 32 characters\");\n        return false;\n      }\n      if (!this.state.password) {\n        message.error(\"Password is a required field\");\n        return false;\n      }\n      if (this.state.password.length < 6) {\n        message.error(\"Password must be at least 8 characters\");\n        return false;\n      }\n      if (this.state.password.length > 32) {\n        message.error(\"Password must be at most 32 characters\");\n        return false;\n      }\n      if (this.state.password !== this.state.confirmPassword) {\n        message.error(\"Passwords do not match\");\n        return false;\n      }\n      return true;\n    };\n    /**\n     * Check the response of the API call to be valid and handle any failures along the way\n     *\n     * @param {boolean}  errored\n     *    Represents whether an error occurred in the process of making the API call itself\n     * @param {{ success: boolean, message?: string }}  response\n     *    The response JSON object which may contain further success or error messages\n     * @returns {boolean}\n     *    Whether validation has passed or not\n     *\n     * If the API call itself encounters an error, errored flag will be true.\n     * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n     * When there is an error in the API call itself, display a generic error message and return false.\n     * When there is an error returned by backend, display the given message field and return false.\n     * When there is no error and API call is successful, return true.\n     */\n    this.validateResponse = (errored, response) => {\n      if (errored || !response.tokens && !response.message) {\n        message.error(\"Something went wrong. Check that the backend is running, reachable and returns valid JSON.\");\n        return false;\n      }\n      if (!response.tokens) {\n        message.error(response.message);\n        return false;\n      }\n      return true;\n    };\n    /**\n     * Perform the API call over the network and return the response\n     *\n     * @returns {{ success: boolean }|undefined}\n     *     The response JSON object\n     *\n     * -    Set the loading state variable to true\n     * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n     * -    The call must be made asynchronously using Promises or async/await\n     * -    The call must handle any errors thrown from the fetch call\n     * -    Parse the result as JSON\n     * -    Set the loading state variable to false once the call has completed\n     * -    Call the validateResponse(errored, response) function defined previously\n     * -    If response passes validation, return the response object\n     *\n     * Example for successful response from backend:\n     * HTTP 200\n     * {\n     *      \"success\": true,\n     * }\n     *\n     * Example for failed response from backend:\n     * HTTP 400\n     * {\n     *      \"success\": false,\n     *      \"message\": \"Username is already taken\"\n     * }\n     */\n    this.performAPICall = async () => {\n      let response = {};\n      let errored = false;\n      this.setState({\n        loading: true\n      });\n      try {\n        response = await (await fetch(`${config.endpoint}/auth/register`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: this.state.username,\n            email: this.state.email,\n            password: this.state.password\n          })\n        })).json();\n      } catch (e) {\n        errored = true;\n      }\n      this.setState({\n        loading: false\n      });\n      if (this.validateResponse(errored, response)) {\n        return response;\n      }\n    };\n    /**\n     * Definition for register handler\n     * This is the function that is called when the user clicks on the register button or submits the register form\n     * -    Call the previously defined validateInput() function and check that is returns true, i.e. the input values pass validation\n     * -    Call the previously defined performAPICall() function asynchronously and capture the returned value in a variable\n     * -    If the returned value exists,\n     *      -   Clear the input fields\n     *      -   Display a success message\n     *      -   Redirect the user to the \"/login\" page\n     */\n    /**\n     * Definition for register handler\n     * This is the function that is called when the user clicks on the register button or submits the register form\n     *    - Display an alert message, \"Register logic not implemented yet\"\n     */\n    this.register = async () => {\n      // if (this.validateInput()) {\n      const response = await this.performAPICall();\n      if (response) {\n        this.setState({\n          username: \"\",\n          password: \"\",\n          confirmPassword: \"\"\n        });\n        message.success(\"Registered successfully\");\n        this.props.history.push(\"/login\");\n      }\n      // }\n    };\n    this.state = {\n      loading: false,\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    };\n  }\n  /**\n   * JSX and HTML goes here\n   * We require a text field, a password field, and a confirm password field (each with data binding to state), and a submit button that calls register()\n   */\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      history: this.props.history,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"register-container container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }\n    }, \"Make an account\"), /*#__PURE__*/React.createElement(Input, {\n      className: \"input-field\",\n      prefix: /*#__PURE__*/React.createElement(UserOutlined, {\n        className: \"site-form-item-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 23\n        }\n      }),\n      placeholder: \"Username\",\n      onChange: e => {\n        this.setState({\n          username: e.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      className: \"input-field\",\n      prefix: /*#__PURE__*/React.createElement(MailOutlined, {\n        className: \"site-form-item-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 23\n        }\n      }),\n      placeholder: \"Email\",\n      onChange: e => {\n        this.setState({\n          email: e.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Input.Password, {\n      className: \"input-field\",\n      prefix: /*#__PURE__*/React.createElement(LockOutlined, {\n        className: \"site-form-item-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 23\n        }\n      }),\n      placeholder: \"Password\",\n      onChange: e => {\n        this.setState({\n          password: e.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Input.Password, {\n      className: \"input-field\",\n      prefix: /*#__PURE__*/React.createElement(LockOutlined, {\n        className: \"site-form-item-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 23\n        }\n      }),\n      placeholder: \"Confirm Password\",\n      onChange: e => {\n        this.setState({\n          confirmPassword: e.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      loading: this.state.loading,\n      type: \"primary\",\n      onClick: this.register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 13\n      }\n    }, \"Register\"))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n\n// export default Register;\n\nexport default withRouter(Register);","map":{"version":3,"names":["LockOutlined","UserOutlined","MailOutlined","Button","Input","message","React","withRouter","config","Footer","Header","Register","Component","constructor","validateInput","state","username","error","length","password","confirmPassword","validateResponse","errored","response","tokens","performAPICall","setState","loading","fetch","endpoint","method","headers","body","JSON","stringify","name","email","json","e","register","success","props","history","push","render","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","prefix","placeholder","onChange","target","value","Password","type","onClick"],"sources":["/Users/hasanshaikh/Documents/GitHub/qkart/frontend/src/components/Register.js"],"sourcesContent":["import { LockOutlined, UserOutlined, MailOutlined } from \"@ant-design/icons\";\nimport { Button, Input, message } from \"antd\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\n\n/**\n * @class Register component handles the Register page UI and functionality\n *\n * Contains the following fields\n *\n * @property {boolean} state.loading\n *    Indicates background action pending completion. When true, further UI actions might be blocked\n * @property {string} state.username\n *    User given field for username\n * @property {string} state.password\n *    User given field for password\n * @property {string} state.confirmPassword\n *    User given field for retyping and confirming password\n */\nclass Register extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    };\n  }\n\n  /**\n   * Validate the input values so that any bad or illegal values are not passed to the backend.\n   *\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * Return false if any validation condition fails, otherwise return true.\n   * -    Check that username field is not an empty value\n   * -    Check that username field is not less than 6 characters in length\n   * -    Check that username field is not more than 32 characters in length\n   * -    Check that password field is not an empty value\n   * -    Check that password field is not less than 6 characters in length\n   * -    Check that password field is not more than 32 characters in length\n   * -    Check that confirmPassword field has the same value as password field\n   */\n  validateInput = () => {\n    if (!this.state.username) {\n      message.error(\"Username is a required field\");\n      return false;\n    }\n    if (this.state.username.length < 6) {\n      message.error(\"Username must be at least 6 characters\");\n      return false;\n    }\n    if (this.state.username.length > 32) {\n      message.error(\"Username must be at most 32 characters\");\n      return false;\n    }\n    if (!this.state.password) {\n      message.error(\"Password is a required field\");\n      return false;\n    }\n    if (this.state.password.length < 6) {\n      message.error(\"Password must be at least 8 characters\");\n      return false;\n    }\n    if (this.state.password.length > 32) {\n      message.error(\"Password must be at most 32 characters\");\n      return false;\n    }\n    if (this.state.password !== this.state.confirmPassword) {\n      message.error(\"Passwords do not match\");\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Check the response of the API call to be valid and handle any failures along the way\n   *\n   * @param {boolean}  errored\n   *    Represents whether an error occurred in the process of making the API call itself\n   * @param {{ success: boolean, message?: string }}  response\n   *    The response JSON object which may contain further success or error messages\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * If the API call itself encounters an error, errored flag will be true.\n   * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n   * When there is an error in the API call itself, display a generic error message and return false.\n   * When there is an error returned by backend, display the given message field and return false.\n   * When there is no error and API call is successful, return true.\n   */\n  validateResponse = (errored, response) => {\n    if (errored || (!response.tokens && !response.message)) {\n      message.error(\n        \"Something went wrong. Check that the backend is running, reachable and returns valid JSON.\"\n      );\n      return false;\n    }\n    if (!response.tokens) {\n      message.error(response.message);\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Perform the API call over the network and return the response\n   *\n   * @returns {{ success: boolean }|undefined}\n   *     The response JSON object\n   *\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   * -    The call must be made asynchronously using Promises or async/await\n   * -    The call must handle any errors thrown from the fetch call\n   * -    Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateResponse(errored, response) function defined previously\n   * -    If response passes validation, return the response object\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * {\n   *      \"success\": true,\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Username is already taken\"\n   * }\n   */\n  performAPICall = async () => {\n    let response = {};\n    let errored = false;\n    this.setState({\n      loading: true,\n    });\n    try {\n      response = await (\n        await fetch(`${config.endpoint}/auth/register`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            name: this.state.username,\n            email: this.state.email,\n            password: this.state.password,\n          }),\n        })\n      ).json();\n    } catch (e) {\n      errored = true;\n    }\n    this.setState({\n      loading: false,\n    });\n    if (this.validateResponse(errored, response)) {\n      return response;\n    }\n  };\n\n  /**\n   * Definition for register handler\n   * This is the function that is called when the user clicks on the register button or submits the register form\n   * -    Call the previously defined validateInput() function and check that is returns true, i.e. the input values pass validation\n   * -    Call the previously defined performAPICall() function asynchronously and capture the returned value in a variable\n   * -    If the returned value exists,\n   *      -   Clear the input fields\n   *      -   Display a success message\n   *      -   Redirect the user to the \"/login\" page\n   */\n\n  /**\n   * Definition for register handler\n   * This is the function that is called when the user clicks on the register button or submits the register form\n   *    - Display an alert message, \"Register logic not implemented yet\"\n   */\n\n  register = async () => {\n    // if (this.validateInput()) {\n    const response = await this.performAPICall();\n    if (response) {\n      this.setState({\n        username: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n      });\n      message.success(\"Registered successfully\");\n      this.props.history.push(\"/login\");\n    }\n    // }\n  };\n\n  /**\n   * JSX and HTML goes here\n   * We require a text field, a password field, and a confirm password field (each with data binding to state), and a submit button that calls register()\n   */\n  render() {\n    return (\n      <>\n        {/* Display Header */}\n        <Header history={this.props.history} />\n\n        {/* Display Register fields */}\n        <div className=\"flex-container\">\n          <div className=\"register-container container\">\n            <h1>Make an account</h1>\n\n            {/* Antd component which renders a formatted <input type=\"text\"> field */}\n            <Input\n              className=\"input-field\"\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Username\"\n              onChange={(e) => {\n                this.setState({\n                  username: e.target.value,\n                });\n              }}\n            />\n            <Input\n              className=\"input-field\"\n              prefix={<MailOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Email\"\n              onChange={(e) => {\n                this.setState({\n                  email: e.target.value,\n                });\n              }}\n            />\n\n            {/* Antd component which renders a formatted <input type=\"password\"> field */}\n            <Input.Password\n              className=\"input-field\"\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Password\"\n              onChange={(e) => {\n                this.setState({\n                  password: e.target.value,\n                });\n              }}\n            />\n\n            {/* Antd component which renders a formatted <input type=\"password\"> field */}\n            <Input.Password\n              className=\"input-field\"\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Confirm Password\"\n              onChange={(e) => {\n                this.setState({\n                  confirmPassword: e.target.value,\n                });\n              }}\n            />\n\n            {/* Antd component which renders a formatted <button type=\"button\"> field */}\n            <Button\n              loading={this.state.loading}\n              type=\"primary\"\n              onClick={this.register}\n            >\n              Register\n            </Button>\n          </div>\n        </div>\n\n        {/* Display the footer */}\n        <Footer></Footer>\n      </>\n    );\n  }\n}\n\n// export default Register;\n\nexport default withRouter(Register);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}