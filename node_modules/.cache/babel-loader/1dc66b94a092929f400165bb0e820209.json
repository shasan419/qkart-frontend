{"ast":null,"code":"var _jsxFileName = \"/Users/hasanshaikh/Documents/GitHub/qkart/frontend/src/components/Search.js\";\nimport { Input, message } from \"antd\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Cart from \"./Cart\";\nimport Header from \"./Header\";\nimport Product from \"./Product\";\nimport { Row, Col } from \"antd\";\nimport Footer from \"./Footer\";\nimport \"./Search.css\";\n\n/**\n * @typedef {Object} Product\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @class Search component handles the Products list page UI and functionality\n * \n * Contains the following fields\n \n * @property {React.RefObject} cartRef \n *    Reference to Cart component (to trigger certain methods within the cart component)\n \n * @property {number} debounceTimeout \n *    Holds the return value from setTimeout() for the search bar debouncer\n * @property {Product[]} products \n *    List of products fetched from backend\n * @property {boolean} state.loading \n *    Indicates background action pending completion. When true, further UI actions might be blocked\n * @property {boolean} state.loggedIn \n *    Indicated if user is logged in or not. Decides whether or not cart sidebar is shown\n * @property {Product[]} state.filteredProducts \n *    List of products filtered by search query to display\n */\nclass Search extends React.Component {\n  constructor() {\n    super();\n    /**\n     * Check the response of the API call to be valid and handle any failures along the way\n     *\n     * @param {boolean} errored\n     *    Represents whether an error occurred in the process of making the API call itself\n     * @param {Product[]|{ success: boolean, message: string }} response\n     *    The response JSON object which may contain further success or error messages\n     * @returns {boolean}\n     *    Whether validation has passed or not\n     *\n     * If the API call itself encounters an error, errored flag will be true.\n     * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n     * When there is an error in the API call itself, display a generic error message and return false.\n     * When there is an error returned by backend, display the given message field and return false.\n     * When there is no error and API call is successful, return true.\n     */\n    this.validateResponse = (errored, response) => {\n      if (errored || !response.length && !response.message) {\n        message.error(\"Could not fetch products. Check that the backend is running, reachable and returns valid JSON.\");\n        return false;\n      }\n      if (!response.length) {\n        message.error(response.message || \"No products found in database\");\n        return false;\n      }\n      return true;\n    };\n    /**\n     * Perform the API call over the network and return the response\n     *\n     * @returns {Product[]|undefined}\n     *    The response JSON object\n     *\n     * -    Set the loading state variable to true\n     * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n     * -    The call must be made asynchronously using Promises or async/await\n     * -    The call must handle any errors thrown from the fetch call\n     * -    Parse the result as JSON\n     * -    Set the loading state variable to false once the call has completed\n     * -    Call the validateResponse(errored, response) function defined previously\n     * -    If response passes validation, return the response object\n     *\n     * Example for successful response from backend:\n     * HTTP 200\n     * [\n     *      {\n     *          \"name\": \"iPhone XR\",\n     *          \"category\": \"Phones\",\n     *          \"cost\": 100,\n     *          \"rating\": 4,\n     *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n     *          \"_id\": \"v4sLtEcMpzabRyfx\"\n     *      },\n     *      {\n     *          \"name\": \"Basketball\",\n     *          \"category\": \"Sports\",\n     *          \"cost\": 100,\n     *          \"rating\": 5,\n     *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n     *          \"_id\": \"upLK9JbQ4rMhTwt4\"\n     *      }\n     * ]\n     *\n     * Example for failed response from backend:\n     * HTTP 500\n     * {\n     *      \"success\": false,\n     *      \"message\": \"Something went wrong. Check the backend console for more details\"\n     * }\n     */\n    this.performAPICall = async () => {\n      let response = {};\n      let errored = false;\n      this.setState({\n        loading: true\n      });\n      try {\n        response = await (await fetch(`${config.endpoint}/products`)).json();\n      } catch (e) {\n        errored = true;\n      }\n      this.setState({\n        loading: false\n      });\n      if (this.validateResponse(errored, response)) {\n        return response;\n      }\n    };\n    /**\n     * Definition for debounce handler\n     * This is the function that is called whenever the user types or changes the text in the searchbar field\n     * We need to make sure that the search handler isn't constantly called for every key press, so we debounce the logic\n     * i.e. we make sure that only after a specific amount of time passes after the final keypress (with no other keypress event happening in between), we run the required function\n     *\n     * @param {{ target: { value: string } }} event\n     *    JS event object emitted from the search input field\n     *\n     * -    Obtain the search query text from the JS event object\n     * -    If the debounceTimeout class property is already set, use clearTimeout to remove the timer from memory: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout\n     * -    Call setTimeout to start a new timer that calls below defined search() method after 300ms and store the return value in the debounceTimeout class property: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n     */\n    this.debounceSearch = event => {\n      const value = event.target.value;\n      if (this.debounceTimeout) {\n        clearTimeout(this.debounceTimeout);\n      }\n      this.debounceTimeout = setTimeout(() => {\n        this.search(value);\n      }, 300);\n    };\n    /**\n     * Definition for search handler\n     * This is the function that is called when the user clicks on the search button or the debounce timer is executed\n     *\n     * @param {string} text\n     *    Search bar input query text that we need to filter the displayed products on\n     *\n     * -    Update filteredProducts state to show a filtered subset of the products class property based on the search text\n     * -    The search filtering should be done on the name and category fields of the product\n     * -    The search filtering should not take in to account the letter case of the search text or name/category fields\n     */\n    this.search = text => {\n      this.setState({\n        filteredProducts: this.products.filter(product => product.name.toUpperCase().includes(text.toUpperCase()) || product.category.toUpperCase().includes(text.toUpperCase()))\n      });\n    };\n    /**\n     * Function to fetch list of products from backend and update state variable\n     * -    Call the previously defined performAPICall() function asynchronously and capture the returned value in a variable\n     * -    If the returned value exists,\n     *      -   Update `products` member variable with the response\n     *      -   Update `filteredProducts` state variable with a clone of `products`\n     */\n    this.getProducts = async () => {\n      const response = await this.performAPICall();\n      if (response) {\n        this.products = response;\n        this.setState({\n          filteredProducts: this.products.slice()\n        });\n      }\n    };\n    /**\n     * Creates the responsive view for a product item\n     *\n     * @param {Product} product\n     * @returns {JSX}\n     *    HTML and JSX to be rendered\n     */\n    this.getProductElement = product => {\n      return /*#__PURE__*/React.createElement(Col, {\n        xs: 24,\n        sm: 12,\n        xl: 6,\n        key: product._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Product, {\n        product: product,\n        addToCart: () => {\n          if (this.state.loggedIn) {\n            this.cartRef.current.postToCart(product._id, 1, true);\n          } else {\n            this.props.history.push(\"/login\");\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 9\n        }\n      }));\n    };\n    this.cartRef = React.createRef();\n    this.debounceTimeout = 0;\n    this.products = [];\n    this.state = {\n      loading: false,\n      loggedIn: false,\n      filteredProducts: []\n    };\n  }\n  /**\n   * Function that runs when component has loaded\n   * This is the function that is called when the user lands on the Search/Products page\n   * This is a good place to check and set a state flag for whether the user is logged in so we can use it for conditional rendering later on in render()\n   */\n\n  componentDidMount() {\n    this.getProducts();\n    if (localStorage.getItem(\"email\") && localStorage.getItem(\"token\")) {\n      this.setState({\n        loggedIn: true\n      });\n    }\n  }\n  /**\n   * JSX and HTML goes here\n   * We require a text field as the search (optionally along with a button for submitting the search query)\n   * We also iterate over the filteredProducts list and display each product as a component\n   \n   * Display Cart sidebar component if user is logged in\n   \n   */\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      history: this.props.history,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Input.Search, {\n      placeholder: \"Search\",\n      onSearch: this.search,\n      onChange: this.debounceSearch,\n      enterButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: {\n        span: 24\n      },\n      md: {\n        span: this.state.loggedIn && this.products.length ? 18 : 24\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search-container \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 15\n      }\n    }, this.products.length !== 0 ? this.state.filteredProducts.map(product => this.getProductElement(product)) : this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 19\n      }\n    }, \"Loading products...\") : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 19\n      }\n    }, \"No products to list\")))), this.state.loggedIn && this.products.length && /*#__PURE__*/React.createElement(Col, {\n      xs: {\n        span: 24\n      },\n      md: {\n        span: 6\n      },\n      className: \"search-cart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Cart, {\n      ref: this.cartRef,\n      products: this.products,\n      history: this.props.history,\n      token: localStorage.getItem(\"token\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }\n    }));\n  }\n}\nexport default withRouter(Search);","map":{"version":3,"names":["Input","message","React","withRouter","config","Cart","Header","Product","Row","Col","Footer","Search","Component","constructor","validateResponse","errored","response","length","error","performAPICall","setState","loading","fetch","endpoint","json","e","debounceSearch","event","value","target","debounceTimeout","clearTimeout","setTimeout","search","text","filteredProducts","products","filter","product","name","toUpperCase","includes","category","getProducts","slice","getProductElement","createElement","xs","sm","xl","key","_id","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","addToCart","state","loggedIn","cartRef","current","postToCart","props","history","push","createRef","componentDidMount","localStorage","getItem","render","Fragment","placeholder","onSearch","onChange","enterButton","span","md","className","map","ref","token"],"sources":["/Users/hasanshaikh/Documents/GitHub/qkart/frontend/src/components/Search.js"],"sourcesContent":["import { Input, message } from \"antd\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { config } from \"../App\";\n\nimport Cart from \"./Cart\";\n\nimport Header from \"./Header\";\nimport Product from \"./Product\";\nimport { Row, Col } from \"antd\";\nimport Footer from \"./Footer\";\nimport \"./Search.css\";\n\n/**\n * @typedef {Object} Product\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @class Search component handles the Products list page UI and functionality\n * \n * Contains the following fields\n \n * @property {React.RefObject} cartRef \n *    Reference to Cart component (to trigger certain methods within the cart component)\n \n * @property {number} debounceTimeout \n *    Holds the return value from setTimeout() for the search bar debouncer\n * @property {Product[]} products \n *    List of products fetched from backend\n * @property {boolean} state.loading \n *    Indicates background action pending completion. When true, further UI actions might be blocked\n * @property {boolean} state.loggedIn \n *    Indicated if user is logged in or not. Decides whether or not cart sidebar is shown\n * @property {Product[]} state.filteredProducts \n *    List of products filtered by search query to display\n */\nclass Search extends React.Component {\n  constructor() {\n    super();\n\n    this.cartRef = React.createRef();\n\n    this.debounceTimeout = 0;\n    this.products = [];\n    this.state = {\n      loading: false,\n      loggedIn: false,\n      filteredProducts: [],\n    };\n  }\n\n  /**\n   * Check the response of the API call to be valid and handle any failures along the way\n   *\n   * @param {boolean} errored\n   *    Represents whether an error occurred in the process of making the API call itself\n   * @param {Product[]|{ success: boolean, message: string }} response\n   *    The response JSON object which may contain further success or error messages\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * If the API call itself encounters an error, errored flag will be true.\n   * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n   * When there is an error in the API call itself, display a generic error message and return false.\n   * When there is an error returned by backend, display the given message field and return false.\n   * When there is no error and API call is successful, return true.\n   */\n  validateResponse = (errored, response) => {\n    if (errored || (!response.length && !response.message)) {\n      message.error(\n        \"Could not fetch products. Check that the backend is running, reachable and returns valid JSON.\"\n      );\n      return false;\n    }\n\n    if (!response.length) {\n      message.error(response.message || \"No products found in database\");\n      return false;\n    }\n\n    return true;\n  };\n\n  /**\n   * Perform the API call over the network and return the response\n   *\n   * @returns {Product[]|undefined}\n   *    The response JSON object\n   *\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   * -    The call must be made asynchronously using Promises or async/await\n   * -    The call must handle any errors thrown from the fetch call\n   * -    Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateResponse(errored, response) function defined previously\n   * -    If response passes validation, return the response object\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"name\": \"iPhone XR\",\n   *          \"category\": \"Phones\",\n   *          \"cost\": 100,\n   *          \"rating\": 4,\n   *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n   *          \"_id\": \"v4sLtEcMpzabRyfx\"\n   *      },\n   *      {\n   *          \"name\": \"Basketball\",\n   *          \"category\": \"Sports\",\n   *          \"cost\": 100,\n   *          \"rating\": 5,\n   *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n   *          \"_id\": \"upLK9JbQ4rMhTwt4\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 500\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Something went wrong. Check the backend console for more details\"\n   * }\n   */\n  performAPICall = async () => {\n    let response = {};\n    let errored = false;\n\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      response = await (await fetch(`${config.endpoint}/products`)).json();\n    } catch (e) {\n      errored = true;\n    }\n\n    this.setState({\n      loading: false,\n    });\n\n    if (this.validateResponse(errored, response)) {\n      return response;\n    }\n  };\n\n  /**\n   * Definition for debounce handler\n   * This is the function that is called whenever the user types or changes the text in the searchbar field\n   * We need to make sure that the search handler isn't constantly called for every key press, so we debounce the logic\n   * i.e. we make sure that only after a specific amount of time passes after the final keypress (with no other keypress event happening in between), we run the required function\n   *\n   * @param {{ target: { value: string } }} event\n   *    JS event object emitted from the search input field\n   *\n   * -    Obtain the search query text from the JS event object\n   * -    If the debounceTimeout class property is already set, use clearTimeout to remove the timer from memory: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout\n   * -    Call setTimeout to start a new timer that calls below defined search() method after 300ms and store the return value in the debounceTimeout class property: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\n   */\n  debounceSearch = (event) => {\n    const value = event.target.value;\n\n    if (this.debounceTimeout) {\n      clearTimeout(this.debounceTimeout);\n    }\n\n    this.debounceTimeout = setTimeout(() => {\n      this.search(value);\n    }, 300);\n  };\n\n  /**\n   * Definition for search handler\n   * This is the function that is called when the user clicks on the search button or the debounce timer is executed\n   *\n   * @param {string} text\n   *    Search bar input query text that we need to filter the displayed products on\n   *\n   * -    Update filteredProducts state to show a filtered subset of the products class property based on the search text\n   * -    The search filtering should be done on the name and category fields of the product\n   * -    The search filtering should not take in to account the letter case of the search text or name/category fields\n   */\n  search = (text) => {\n    this.setState({\n      filteredProducts: this.products.filter(\n        (product) =>\n          product.name.toUpperCase().includes(text.toUpperCase()) ||\n          product.category.toUpperCase().includes(text.toUpperCase())\n      ),\n    });\n  };\n\n  /**\n   * Function to fetch list of products from backend and update state variable\n   * -    Call the previously defined performAPICall() function asynchronously and capture the returned value in a variable\n   * -    If the returned value exists,\n   *      -   Update `products` member variable with the response\n   *      -   Update `filteredProducts` state variable with a clone of `products`\n   */\n  getProducts = async () => {\n    const response = await this.performAPICall();\n\n    if (response) {\n      this.products = response;\n      this.setState({\n        filteredProducts: this.products.slice(),\n      });\n    }\n  };\n\n  /**\n   * Function that runs when component has loaded\n   * This is the function that is called when the user lands on the Search/Products page\n   * This is a good place to check and set a state flag for whether the user is logged in so we can use it for conditional rendering later on in render()\n   */\n\n  componentDidMount() {\n    this.getProducts();\n\n    if (localStorage.getItem(\"email\") && localStorage.getItem(\"token\")) {\n      this.setState({\n        loggedIn: true,\n      });\n    }\n  }\n\n  /**\n   * Creates the responsive view for a product item\n   *\n   * @param {Product} product\n   * @returns {JSX}\n   *    HTML and JSX to be rendered\n   */\n  getProductElement = (product) => {\n    return (\n      <Col xs={24} sm={12} xl={6} key={product._id}>\n        <Product\n          product={product}\n          addToCart={() => {\n            if (this.state.loggedIn) {\n              this.cartRef.current.postToCart(product._id, 1, true);\n            } else {\n              this.props.history.push(\"/login\");\n            }\n          }}\n        />\n      </Col>\n    );\n  };\n\n  /**\n   * JSX and HTML goes here\n   * We require a text field as the search (optionally along with a button for submitting the search query)\n   * We also iterate over the filteredProducts list and display each product as a component\n   \n   * Display Cart sidebar component if user is logged in\n   \n   */\n  render() {\n    return (\n      <>\n        {/* Display Header with Search bar */}\n        <Header history={this.props.history}>\n          <Input.Search\n            placeholder=\"Search\"\n            onSearch={this.search}\n            onChange={this.debounceSearch}\n            enterButton={true}\n          />\n        </Header>\n\n        {/* Use Antd Row/Col components to display products and cart as columns in the same row*/}\n        <Row>\n          {/* Display products */}\n          <Col\n            xs={{ span: 24 }}\n            md={{ span: this.state.loggedIn && this.products.length ? 18 : 24 }}\n          >\n            <div className=\"search-container \">\n              {/* Display each product item wrapped in a Col component */}\n              <Row>\n                {this.products.length !== 0 ? (\n                  this.state.filteredProducts.map((product) =>\n                    this.getProductElement(product)\n                  )\n                ) : this.state.loading ? (\n                  <div className=\"loading-text\">Loading products...</div>\n                ) : (\n                  <div className=\"loading-text\">No products to list</div>\n                )}\n              </Row>\n            </div>\n          </Col>\n\n          {/* Display cart */}\n\n          {this.state.loggedIn && this.products.length && (\n            <Col xs={{ span: 24 }} md={{ span: 6 }} className=\"search-cart\">\n              <div>\n                <Cart\n                  ref={this.cartRef}\n                  products={this.products}\n                  history={this.props.history}\n                  token={localStorage.getItem(\"token\")}\n                />\n              </div>\n            </Col>\n          )}\n        </Row>\n\n        {/* Display the footer */}\n        <Footer></Footer>\n      </>\n    );\n  }\n}\n\nexport default withRouter(Search);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}