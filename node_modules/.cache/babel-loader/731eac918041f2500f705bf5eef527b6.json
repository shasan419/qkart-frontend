{"ast":null,"code":"var _jsxFileName = \"/Users/hasanshaikh/Documents/GitHub/qkart/frontend/src/components/Checkout.js\";\nimport { Button, message, Radio, Row, Col } from \"antd\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Cart from \"./Cart\";\nimport \"./Checkout.css\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\n\n/**\n * @typedef {Object} Product\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} Address\n * @property {string} _id - Unique ID for the address\n * @property {string} address - Full address string\n */\n\n/**\n * @class Checkout component handles the Checkout page UI and functionality\n *\n * Contains the following fields\n * @property {React.RefObject} cartRef\n *    Reference to Cart component (to trigger certain methods within the cart component)\n * @property {Product[]} state.products\n *    List of products fetched from backend\n * @property {Address[]} state.address\n *    List of user's address fetched from backend\n * @property {number} state.selectedAddressIndex\n *    Index for which of the user's addresses is currently selected\n * @property {string} state.newAddress\n *    Data binding for the input field to enter a new address\n * @property {number} state.balance\n *    Balance amount in the current user's wallet\n * @property {boolean} state.loading\n *    Indicates background action pending completion. When true, further UI actions might be blocked\n */\nclass Checkout extends React.Component {\n  constructor() {\n    super();\n    /**\n     * Check the response of the getProducts() API call to be valid and handle any failures along the way\n     *\n     * @param {boolean} errored\n     *    Represents whether an error occurred in the process of making the API call itself\n     * @param {Product[]|{ success: boolean, message: string }} response\n     *    The response JSON object which may contain further success or error messages\n     * @returns {boolean}\n     *    Whether validation has passed or not\n     *\n     * If the API call itself encounters an error, errored flag will be true.\n     * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n     * When there is an error in the API call itself, display a generic error message and return false.\n     * When there is an error returned by backend, display the given message field and return false.\n     * When there is no error and API call is successful, return true.\n     */\n    this.validateGetProductsResponse = (errored, response) => {\n      if (errored || !response.length && !response.message) {\n        message.error(\"Could not fetch products. Check that the backend is running, reachable and returns valid JSON.\");\n        return false;\n      }\n      if (!response.length) {\n        message.error(response.message || \"No products found in database\");\n        return false;\n      }\n      return true;\n    };\n    /**\n     * Perform the API call to fetch all products from backend\n     * -    Set the loading state variable to true\n     * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n     * -    The call must be made asynchronously using Promises or async/await\n     * -    The call must handle any errors thrown from the fetch call\n     * -    Parse the result as JSON\n     * -    Set the loading state variable to false once the call has completed\n     * -    Call the validateGetProductsResponse(errored, response) function defined previously\n     * -    If response passes validation, and the response exists,\n     *      -   Update products state variable with the response\n     *\n     * Example for successful response from backend:\n     * HTTP 200\n     * [\n     *      {\n     *          \"name\": \"iPhone XR\",\n     *          \"category\": \"Phones\",\n     *          \"cost\": 100,\n     *          \"rating\": 4,\n     *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n     *          \"_id\": \"v4sLtEcMpzabRyfx\"\n     *      },\n     *      {\n     *          \"name\": \"Basketball\",\n     *          \"category\": \"Sports\",\n     *          \"cost\": 100,\n     *          \"rating\": 5,\n     *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n     *          \"_id\": \"upLK9JbQ4rMhTwt4\"\n     *      }\n     * ]\n     *\n     * Example for failed response from backend:\n     * HTTP 500\n     * {\n     *      \"success\": false,\n     *      \"message\": \"Something went wrong. Check the backend console for more details\"\n     * }\n     */\n    this.getProducts = async () => {\n      let response = {};\n      let errored = false;\n      this.setState({\n        loading: true\n      });\n      try {\n        response = await (await fetch(`${config.endpoint}/products`)).json();\n      } catch (e) {\n        errored = true;\n      }\n      this.setState({\n        loading: false\n      });\n      if (this.validateGetProductsResponse(errored, response)) {\n        if (response) {\n          this.setState({\n            products: response\n          });\n        }\n      }\n    };\n    /**\n     * Check the response of other API calls to be valid and handle any failures along the way\n     *\n     * @param {boolean} errored\n     *    Represents whether an error occurred in the process of making the API call itself\n     * @param {Address[]|{ success: boolean, message?: string }} response\n     *    The response JSON object which may contain further success or error messages\n     * @param {string} couldNot\n     *    String indicating what could not be loaded\n     * @returns {boolean}\n     *    Whether validation has passed or not\n     *\n     * If the API call itself encounters an error, errored flag will be true.\n     * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n     * When there is an error in the API call itself, display a generic error message and return false.\n     * When there is an error returned by backend, display the given message field and return false.\n     * When there is no error and API call is successful, return true.\n     */\n    this.validateResponse = (errored, response, couldNot) => {\n      if (errored) {\n        message.error(`Could not ${couldNot}. Check that the backend is running, reachable and returns valid JSON.`);\n        return false;\n      }\n      if (response.message) {\n        message.error(response.message);\n        return false;\n      }\n      return true;\n    };\n    /**\n     * Perform the API call to fetch the user's addresses from backend\n     * -    Set the loading state variable to true\n     * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n     * -    The call must be made asynchronously using Promises or async/await\n     * -    The call must be authenticated with an authorization header containing Oauth token\n     * -    The call must handle any errors thrown from the fetch call\n     * -    Parse the result as JSON\n     * -    Set the loading state variable to false once the call has completed\n     * -    Call the validateResponse(errored, response, couldNot) function defined previously\n     * -    If response passes validation, update the addresses state variable\n     *\n     * Example for successful response from backend:\n     * HTTP 200\n     * [\n     *      {\n     *          \"_id\": \"m_rg_eW5kLALNcn70kpyR\",\n     *          \"address\": \"No. 341, Banashankari, Bangalore, India\"\n     *      },\n     *      {\n     *          \"_id\": \"9sW_60WkwrT7gDPmgUdoP\",\n     *          \"address\": \"123 Main Street, New York, NY 10030\"\n     *      },\n     * ]\n     *\n     * Example for failed response from backend:\n     * HTTP 401\n     * {\n     *      \"success\": false,\n     *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n     * }\n     */\n    this.getAddresses = async () => {\n      let response = {};\n      let errored = false;\n      this.setState({\n        loading: true\n      });\n      try {\n        response = await (await fetch(`${config.endpoint}/users/${localStorage.getItem(\"userId\")}?q=address`, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        })).json();\n      } catch (e) {\n        errored = true;\n      }\n      this.setState({\n        loading: false\n      });\n      if (this.validateResponse(errored, response, \"fetch addresses\")) {\n        if (response) {\n          this.setState({\n            address: response.address !== \"ADDRESS_NOT_SET\" ? response.address : \"\"\n          });\n        }\n      }\n    };\n    /**\n     * Perform the API call to add an address for the user\n     * -    Set the loading state variable to true\n     * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n     * -    The call must be made asynchronously using Promises or async/await\n     * -    The call must be authenticated with an authorization header containing Oauth token\n     * -    The call must handle any errors thrown from the fetch call\n     * -    Parse the result as JSON\n     * -    Set the loading state variable to false once the call has completed\n     * -    Call the validateResponse(errored, response, couldNot) function defined previously\n     * -    If response passes validation, and response exists,\n     *      -   Show an appropriate success message\n     *      -   Clear the new address input field\n     *      -   Call getAddresses() to refresh list of addresses\n     *\n     * Example for successful response from backend:\n     * HTTP 200\n     * {\n     *      \"success\": true\n     * }\n     *\n     * Example for failed response from backend:\n     * HTTP 400\n     * {\n     *      \"success\": false,\n     *      \"message\": \"Address should be greater than 20 characters\"\n     * }\n     */\n    this.addAddress = async () => {\n      let response = {};\n      let errored = false;\n      this.setState({\n        loading: true\n      });\n      try {\n        response = await (await fetch(`${config.endpoint}/users/${localStorage.getItem(\"userId\")}?q=address`, {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            address: this.state.newAddress\n          })\n        })).json();\n      } catch (e) {\n        errored = true;\n      }\n      this.setState({\n        loading: false\n      });\n      if (this.validateResponse(errored, response, \"add a new address\")) {\n        if (response) {\n          message.success(\"Address added\");\n          this.setState({\n            newAddress: \"\"\n          });\n          await this.getAddresses();\n        }\n      }\n    };\n    /**\n     * Perform the API call to delete an address for the user\n     *\n     * @param {string} addressId\n     *    ID of the address record to delete\n     *\n     * -    Set the loading state variable to true\n     * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n     * -    The call must be made asynchronously using Promises or async/await\n     * -    The call must be authenticated with an authorization header containing Oauth token\n     * -    The call must handle any errors thrown from the fetch call\n     * -    Parse the result as JSON\n     * -    Set the loading state variable to false once the call has completed\n     * -    Call the validateResponse(errored, response, couldNot) function defined previously\n     * -    If response passes validation, and response exists,\n     *      -   Show an appropriate success message\n     *      -   Call getAddresses() to refresh list of addresses\n     *\n     * Example for successful response from backend:\n     * HTTP 200\n     * {\n     *      \"success\": true\n     * }\n     *\n     * Example for failed response from backend:\n     * HTTP 404\n     * {\n     *      \"success\": false,\n     *      \"message\": \"Address to delete was not found\"\n     * }\n     */\n    this.deleteAddress = async addressId => {\n      let response = {};\n      let errored = false;\n      this.setState({\n        loading: true\n      });\n      try {\n        response = await (await fetch(`${config.endpoint}/user/addresses/${addressId}`, {\n          method: \"DELETE\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        })).json();\n      } catch (e) {\n        errored = true;\n      }\n      this.setState({\n        loading: false\n      });\n      if (this.validateResponse(errored, response, \"delete address\")) {\n        if (response) {\n          message.success(\"Address deleted\");\n          await this.getAddresses();\n        }\n      }\n    };\n    /**\n     * Perform the API call to place an order\n     *\n     * -    Set the loading state variable to true\n     * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n     * -    The call must be made asynchronously using Promises or async/await\n     * -    The call must be authenticated with an authorization header containing Oauth token\n     * -    The call must handle any errors thrown from the fetch call\n     * -    Parse the result as JSON\n     * -    Set the loading state variable to false once the call has completed\n     * -    Call the validateResponse(errored, response, couldNot) function defined previously\n     * -    If response passes validation, and response exists,\n     *      -   Show an appropriate success message\n     *      -   Update the localStorage field for `balance` to reflect the new balance\n     *      -   Redirect the user to the thanks page\n     *\n     * Example for successful response from backend:\n     * HTTP 200\n     * {\n     *      \"success\": true\n     * }\n     *\n     * Example for failed response from backend:\n     * HTTP 400\n     * {\n     *      \"success\": false,\n     *      \"message\": \"Wallet balance not sufficient to place order\"\n     * }\n     */\n    this.checkout = async () => {\n      let response = {};\n      let errored = false;\n      this.setState({\n        loading: true\n      });\n      try {\n        response = await fetch(`${config.endpoint}/cart/checkout`, {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n          }\n        });\n      } catch (e) {\n        errored = true;\n        console.log(e);\n      }\n      this.setState({\n        loading: false\n      });\n      let data;\n      if (response.status !== 204) {\n        data = await response.json();\n      }\n      if (response.status === 204 || this.validateResponse(errored, data)) {\n        message.success(\"Order placed\");\n        console.log(this.cartRef.current.calculateTotal());\n        localStorage.setItem(\"balance\", parseInt(localStorage.getItem(\"balance\")) - this.cartRef.current.calculateTotal());\n        this.props.history.push(\"/thanks\");\n      }\n    };\n    /**\n     * Function that is called when the user clicks on the place order button\n     * -    If the user's wallet balance is less than the total cost of the user's cart, then display an appropriate error message\n     * -    Else if the user does not have any addresses, or has not selected an available address, then display an appropriate error message\n     * -    Else call the checkout() method to proceed with placing and order\n     */\n    this.order = () => {\n      this.checkout();\n    };\n    this.cartRef = React.createRef();\n    this.state = {\n      products: [],\n      address: \"\",\n      selectedAddressIndex: 0,\n      newAddress: \"\",\n      balance: 0,\n      loading: false\n    };\n  }\n  /**\n   * Function that runs when component has loaded\n   * This is the function that is called when the user lands on the Checkout page\n   * If the user is logged in (i.e. the localStorage fields for `username` and `token` exist), fetch products and addresses from backend (asynchronously) to component state\n   * Update the balance state variable with the value stored in localStorage\n   * Else, show an error message indicating that the user must be logged in first and redirect the user to the home page\n   */\n  async componentDidMount() {\n    if (localStorage.getItem(\"username\") && localStorage.getItem(\"token\")) {\n      await this.getProducts();\n      await this.getAddresses();\n      this.setState({\n        balance: localStorage.getItem(\"balance\")\n      });\n    } else {\n      message.error(\"You must be logged in to visit the checkout page\");\n      this.props.history.push(\"/\");\n    }\n  }\n\n  /**\n   * JSX and HTML goes here\n   * We display the cart component as the main review for the user on this page (Cart component must know that it should be non-editable)\n   * We display the payment method and wallet balance\n   * We display the list of addresses for the user to select from\n   * If the user has no addresses, appropriate text is displayed instead\n   * A text field (and button) is required so the user may add a new address\n   * We display a link to the products page if the user wants to shop more or update cart\n   * A button to place the order is displayed\n   */\n  render() {\n    const radioStyle = {\n      display: \"block\",\n      height: \"30px\",\n      lineHeight: \"30px\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      history: this.props.history,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"checkout-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: {\n        span: 24,\n        order: 2\n      },\n      md: {\n        span: 18,\n        order: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"checkout-shipping\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        marginBottom: \"-10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 17\n      }\n    }, \"Shipping\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 17\n      }\n    }, \"Shipping Address\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"address-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 17\n      }\n    }, this.state.address.length ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"address-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"address-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 23\n      }\n    }, this.state.address)) :\n    /*#__PURE__*/\n    // Display the list of addresses as radio buttons\n    // <Radio.Group\n    //   className=\"addresses\"\n    //   defaultValue={this.state.selectedAddressIndex}\n    //   onChange={e => {\n    //     this.setState({\n    //       selectedAddressIndex: e.target.value\n    //     });\n    //   }}\n    // >\n    //   <Row>\n    //     {/* Create a view for each of the user's addresses */}\n    //     {this.state.address && (\n    //       <Col xs={24} lg={12} key={\"address\"}>\n    //         <div className=\"address\">\n    //           <Radio.Button value={\"address#1\"}>\n    //             <div className=\"address-box\">\n    //               {/* Display address title */}\n    //               <div className=\"address-text\">\n    //                 {this.state.address}\n    //               </div>\n    //               {/* Display button to delete address from user's list */}\n    //               {/* <Button\n    //                 type=\"primary\"\n    //                 onClick={async () => {\n    //                   await this.deleteAddress(address._id);\n    //                 }}\n    //               >\n    //                 Delete\n    //               </Button> */}\n    //             </div>\n    //           </Radio.Button>\n    //         </div>\n    //       </Col>\n    //     )}\n    //   </Row>\n    // </Radio.Group>\n    // Display static text banner if no addresses are added\n    React.createElement(\"div\", {\n      className: \"red-text checkout-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 21\n      }\n    }, \"No addresses found. Please add one to proceed.\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"checkout-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TextArea, {\n      className: \"new-address\",\n      placeholder: this.state.address ? \"Update Address\" : \"Add new address\",\n      rows: 4,\n      value: this.state.newAddress,\n      onChange: e => {\n        this.setState({\n          newAddress: e.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.addAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 23\n      }\n    }, this.state.address ? \"Update Address\" : \"Add new address\")))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        marginBottom: \"-10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 19\n      }\n    }, \"Pricing\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 19\n      }\n    }, \"Payment Method\"), /*#__PURE__*/React.createElement(Radio.Group, {\n      value: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Radio, {\n      style: radioStyle,\n      value: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 21\n      }\n    }, \"Wallet\", /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 23\n      }\n    }, \" (\\u20B9\", this.state.balance, \" available)\")))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      className: \"ant-btn-success\",\n      loading: this.state.loading,\n      type: \"primary\",\n      onClick: this.order,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 19\n      }\n    }, \"Place Order\")))), /*#__PURE__*/React.createElement(Col, {\n      xs: {\n        span: 24,\n        order: 1\n      },\n      md: {\n        span: 6,\n        order: 2\n      },\n      className: \"checkout-cart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 15\n      }\n    }, this.state.products.length && /*#__PURE__*/React.createElement(Cart, {\n      ref: this.cartRef,\n      products: this.state.products,\n      history: this.props.history,\n      token: localStorage.getItem(\"token\"),\n      checkout: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 19\n      }\n    }))))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 9\n      }\n    }));\n  }\n}\nexport default withRouter(Checkout);","map":{"version":3,"names":["Button","message","Radio","Row","Col","TextArea","React","withRouter","config","Cart","Footer","Header","Checkout","Component","constructor","validateGetProductsResponse","errored","response","length","error","getProducts","setState","loading","fetch","endpoint","json","e","products","validateResponse","couldNot","getAddresses","localStorage","getItem","method","headers","Authorization","address","addAddress","body","JSON","stringify","state","newAddress","success","deleteAddress","addressId","checkout","console","log","data","status","cartRef","current","calculateTotal","setItem","parseInt","props","history","push","order","createRef","selectedAddressIndex","balance","componentDidMount","render","radioStyle","display","height","lineHeight","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","xs","span","md","style","marginBottom","placeholder","rows","value","onChange","target","type","onClick","Group","ref","token"],"sources":["/Users/hasanshaikh/Documents/GitHub/qkart/frontend/src/components/Checkout.js"],"sourcesContent":["import { Button, message, Radio, Row, Col } from \"antd\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Cart from \"./Cart\";\nimport \"./Checkout.css\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\n\n/**\n * @typedef {Object} Product\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} Address\n * @property {string} _id - Unique ID for the address\n * @property {string} address - Full address string\n */\n\n/**\n * @class Checkout component handles the Checkout page UI and functionality\n *\n * Contains the following fields\n * @property {React.RefObject} cartRef\n *    Reference to Cart component (to trigger certain methods within the cart component)\n * @property {Product[]} state.products\n *    List of products fetched from backend\n * @property {Address[]} state.address\n *    List of user's address fetched from backend\n * @property {number} state.selectedAddressIndex\n *    Index for which of the user's addresses is currently selected\n * @property {string} state.newAddress\n *    Data binding for the input field to enter a new address\n * @property {number} state.balance\n *    Balance amount in the current user's wallet\n * @property {boolean} state.loading\n *    Indicates background action pending completion. When true, further UI actions might be blocked\n */\nclass Checkout extends React.Component {\n  constructor() {\n    super();\n    this.cartRef = React.createRef();\n    this.state = {\n      products: [],\n      address: \"\",\n      selectedAddressIndex: 0,\n      newAddress: \"\",\n      balance: 0,\n      loading: false,\n    };\n  }\n\n  /**\n   * Check the response of the getProducts() API call to be valid and handle any failures along the way\n   *\n   * @param {boolean} errored\n   *    Represents whether an error occurred in the process of making the API call itself\n   * @param {Product[]|{ success: boolean, message: string }} response\n   *    The response JSON object which may contain further success or error messages\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * If the API call itself encounters an error, errored flag will be true.\n   * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n   * When there is an error in the API call itself, display a generic error message and return false.\n   * When there is an error returned by backend, display the given message field and return false.\n   * When there is no error and API call is successful, return true.\n   */\n  validateGetProductsResponse = (errored, response) => {\n    if (errored || (!response.length && !response.message)) {\n      message.error(\n        \"Could not fetch products. Check that the backend is running, reachable and returns valid JSON.\"\n      );\n      return false;\n    }\n\n    if (!response.length) {\n      message.error(response.message || \"No products found in database\");\n      return false;\n    }\n\n    return true;\n  };\n\n  /**\n   * Perform the API call to fetch all products from backend\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   * -    The call must be made asynchronously using Promises or async/await\n   * -    The call must handle any errors thrown from the fetch call\n   * -    Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateGetProductsResponse(errored, response) function defined previously\n   * -    If response passes validation, and the response exists,\n   *      -   Update products state variable with the response\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"name\": \"iPhone XR\",\n   *          \"category\": \"Phones\",\n   *          \"cost\": 100,\n   *          \"rating\": 4,\n   *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n   *          \"_id\": \"v4sLtEcMpzabRyfx\"\n   *      },\n   *      {\n   *          \"name\": \"Basketball\",\n   *          \"category\": \"Sports\",\n   *          \"cost\": 100,\n   *          \"rating\": 5,\n   *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n   *          \"_id\": \"upLK9JbQ4rMhTwt4\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 500\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Something went wrong. Check the backend console for more details\"\n   * }\n   */\n  getProducts = async () => {\n    let response = {};\n    let errored = false;\n\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      response = await (await fetch(`${config.endpoint}/products`)).json();\n    } catch (e) {\n      errored = true;\n    }\n\n    this.setState({\n      loading: false,\n    });\n\n    if (this.validateGetProductsResponse(errored, response)) {\n      if (response) {\n        this.setState({\n          products: response,\n        });\n      }\n    }\n  };\n\n  /**\n   * Check the response of other API calls to be valid and handle any failures along the way\n   *\n   * @param {boolean} errored\n   *    Represents whether an error occurred in the process of making the API call itself\n   * @param {Address[]|{ success: boolean, message?: string }} response\n   *    The response JSON object which may contain further success or error messages\n   * @param {string} couldNot\n   *    String indicating what could not be loaded\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * If the API call itself encounters an error, errored flag will be true.\n   * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n   * When there is an error in the API call itself, display a generic error message and return false.\n   * When there is an error returned by backend, display the given message field and return false.\n   * When there is no error and API call is successful, return true.\n   */\n  validateResponse = (errored, response, couldNot) => {\n    if (errored) {\n      message.error(\n        `Could not ${couldNot}. Check that the backend is running, reachable and returns valid JSON.`\n      );\n      return false;\n    }\n    if (response.message) {\n      message.error(response.message);\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Perform the API call to fetch the user's addresses from backend\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   * -    The call must be made asynchronously using Promises or async/await\n   * -    The call must be authenticated with an authorization header containing Oauth token\n   * -    The call must handle any errors thrown from the fetch call\n   * -    Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateResponse(errored, response, couldNot) function defined previously\n   * -    If response passes validation, update the addresses state variable\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"m_rg_eW5kLALNcn70kpyR\",\n   *          \"address\": \"No. 341, Banashankari, Bangalore, India\"\n   *      },\n   *      {\n   *          \"_id\": \"9sW_60WkwrT7gDPmgUdoP\",\n   *          \"address\": \"123 Main Street, New York, NY 10030\"\n   *      },\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  getAddresses = async () => {\n    let response = {};\n    let errored = false;\n\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      response = await (\n        await fetch(\n          `${config.endpoint}/users/${localStorage.getItem(\n            \"userId\"\n          )}?q=address`,\n          {\n            method: \"GET\",\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            },\n          }\n        )\n      ).json();\n    } catch (e) {\n      errored = true;\n    }\n\n    this.setState({\n      loading: false,\n    });\n\n    if (this.validateResponse(errored, response, \"fetch addresses\")) {\n      if (response) {\n        this.setState({\n          address:\n            response.address !== \"ADDRESS_NOT_SET\" ? response.address : \"\",\n        });\n      }\n    }\n  };\n\n  /**\n   * Perform the API call to add an address for the user\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   * -    The call must be made asynchronously using Promises or async/await\n   * -    The call must be authenticated with an authorization header containing Oauth token\n   * -    The call must handle any errors thrown from the fetch call\n   * -    Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateResponse(errored, response, couldNot) function defined previously\n   * -    If response passes validation, and response exists,\n   *      -   Show an appropriate success message\n   *      -   Clear the new address input field\n   *      -   Call getAddresses() to refresh list of addresses\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * {\n   *      \"success\": true\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Address should be greater than 20 characters\"\n   * }\n   */\n  addAddress = async () => {\n    let response = {};\n    let errored = false;\n\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      response = await (\n        await fetch(\n          `${config.endpoint}/users/${localStorage.getItem(\n            \"userId\"\n          )}?q=address`,\n          {\n            method: \"PUT\",\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              address: this.state.newAddress,\n            }),\n          }\n        )\n      ).json();\n    } catch (e) {\n      errored = true;\n    }\n\n    this.setState({\n      loading: false,\n    });\n\n    if (this.validateResponse(errored, response, \"add a new address\")) {\n      if (response) {\n        message.success(\"Address added\");\n\n        this.setState({\n          newAddress: \"\",\n        });\n\n        await this.getAddresses();\n      }\n    }\n  };\n\n  /**\n   * Perform the API call to delete an address for the user\n   *\n   * @param {string} addressId\n   *    ID of the address record to delete\n   *\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   * -    The call must be made asynchronously using Promises or async/await\n   * -    The call must be authenticated with an authorization header containing Oauth token\n   * -    The call must handle any errors thrown from the fetch call\n   * -    Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateResponse(errored, response, couldNot) function defined previously\n   * -    If response passes validation, and response exists,\n   *      -   Show an appropriate success message\n   *      -   Call getAddresses() to refresh list of addresses\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * {\n   *      \"success\": true\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 404\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Address to delete was not found\"\n   * }\n   */\n  deleteAddress = async (addressId) => {\n    let response = {};\n    let errored = false;\n\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      response = await (\n        await fetch(`${config.endpoint}/user/addresses/${addressId}`, {\n          method: \"DELETE\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        })\n      ).json();\n    } catch (e) {\n      errored = true;\n    }\n\n    this.setState({\n      loading: false,\n    });\n\n    if (this.validateResponse(errored, response, \"delete address\")) {\n      if (response) {\n        message.success(\"Address deleted\");\n\n        await this.getAddresses();\n      }\n    }\n  };\n\n  /**\n   * Perform the API call to place an order\n   *\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   * -    The call must be made asynchronously using Promises or async/await\n   * -    The call must be authenticated with an authorization header containing Oauth token\n   * -    The call must handle any errors thrown from the fetch call\n   * -    Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateResponse(errored, response, couldNot) function defined previously\n   * -    If response passes validation, and response exists,\n   *      -   Show an appropriate success message\n   *      -   Update the localStorage field for `balance` to reflect the new balance\n   *      -   Redirect the user to the thanks page\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * {\n   *      \"success\": true\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Wallet balance not sufficient to place order\"\n   * }\n   */\n  checkout = async () => {\n    let response = {};\n    let errored = false;\n\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      response = await fetch(`${config.endpoint}/cart/checkout`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n    } catch (e) {\n      errored = true;\n      console.log(e);\n    }\n\n    this.setState({\n      loading: false,\n    });\n\n    let data;\n    if (response.status !== 204) {\n      data = await response.json();\n    }\n    if (response.status === 204 || this.validateResponse(errored, data)) {\n      message.success(\"Order placed\");\n\n      console.log(this.cartRef.current.calculateTotal());\n      localStorage.setItem(\n        \"balance\",\n        parseInt(localStorage.getItem(\"balance\")) -\n          this.cartRef.current.calculateTotal()\n      );\n\n      this.props.history.push(\"/thanks\");\n    }\n  };\n\n  /**\n   * Function that is called when the user clicks on the place order button\n   * -    If the user's wallet balance is less than the total cost of the user's cart, then display an appropriate error message\n   * -    Else if the user does not have any addresses, or has not selected an available address, then display an appropriate error message\n   * -    Else call the checkout() method to proceed with placing and order\n   */\n  order = () => {\n    this.checkout();\n  };\n\n  /**\n   * Function that runs when component has loaded\n   * This is the function that is called when the user lands on the Checkout page\n   * If the user is logged in (i.e. the localStorage fields for `username` and `token` exist), fetch products and addresses from backend (asynchronously) to component state\n   * Update the balance state variable with the value stored in localStorage\n   * Else, show an error message indicating that the user must be logged in first and redirect the user to the home page\n   */\n  async componentDidMount() {\n    if (localStorage.getItem(\"username\") && localStorage.getItem(\"token\")) {\n      await this.getProducts();\n      await this.getAddresses();\n\n      this.setState({\n        balance: localStorage.getItem(\"balance\"),\n      });\n    } else {\n      message.error(\"You must be logged in to visit the checkout page\");\n      this.props.history.push(\"/\");\n    }\n  }\n\n  /**\n   * JSX and HTML goes here\n   * We display the cart component as the main review for the user on this page (Cart component must know that it should be non-editable)\n   * We display the payment method and wallet balance\n   * We display the list of addresses for the user to select from\n   * If the user has no addresses, appropriate text is displayed instead\n   * A text field (and button) is required so the user may add a new address\n   * We display a link to the products page if the user wants to shop more or update cart\n   * A button to place the order is displayed\n   */\n  render() {\n    const radioStyle = {\n      display: \"block\",\n      height: \"30px\",\n      lineHeight: \"30px\",\n    };\n\n    return (\n      <>\n        {/* Display Header */}\n        <Header history={this.props.history} />\n\n        {/* Display Checkout page content */}\n        <div className=\"checkout-container\">\n          <Row>\n            {/* Display checkout instructions */}\n\n            <Col xs={{ span: 24, order: 2 }} md={{ span: 18, order: 1 }}>\n              <div className=\"checkout-shipping\">\n                <h1 style={{ marginBottom: \"-10px\" }}>Shipping</h1>\n\n                <hr></hr>\n                <br></br>\n\n                <p>Shipping Address</p>\n\n                {/* Display the \"Shipping\" sectino */}\n                <div className=\"address-section\">\n                  {this.state.address.length ? (\n                    <div className=\"address-box\">\n                      {/* Display address title */}\n                      <div className=\"address-text\">{this.state.address}</div>\n\n                      {/* Display button to delete address from user's list */}\n                      {/* <Button\n                                    type=\"primary\"\n                                    \n                                    onClick={async () => {\n                                      await this.deleteAddress(address._id);\n                                    }}\n                                    \n                                  >\n                                    Delete\n                                  </Button> */}\n                    </div>\n                  ) : (\n                    // Display the list of addresses as radio buttons\n                    // <Radio.Group\n                    //   className=\"addresses\"\n                    //   defaultValue={this.state.selectedAddressIndex}\n                    //   onChange={e => {\n                    //     this.setState({\n                    //       selectedAddressIndex: e.target.value\n                    //     });\n                    //   }}\n                    // >\n                    //   <Row>\n                    //     {/* Create a view for each of the user's addresses */}\n                    //     {this.state.address && (\n                    //       <Col xs={24} lg={12} key={\"address\"}>\n                    //         <div className=\"address\">\n                    //           <Radio.Button value={\"address#1\"}>\n                    //             <div className=\"address-box\">\n                    //               {/* Display address title */}\n                    //               <div className=\"address-text\">\n                    //                 {this.state.address}\n                    //               </div>\n\n                    //               {/* Display button to delete address from user's list */}\n                    //               {/* <Button\n                    //                 type=\"primary\"\n\n                    //                 onClick={async () => {\n                    //                   await this.deleteAddress(address._id);\n                    //                 }}\n\n                    //               >\n                    //                 Delete\n                    //               </Button> */}\n                    //             </div>\n                    //           </Radio.Button>\n                    //         </div>\n                    //       </Col>\n                    //     )}\n                    //   </Row>\n                    // </Radio.Group>\n                    // Display static text banner if no addresses are added\n                    <div className=\"red-text checkout-row\">\n                      No addresses found. Please add one to proceed.\n                    </div>\n                  )}\n\n                  <div className=\"checkout-row\">\n                    {/* Text input field to type a new address */}\n                    <div>\n                      <TextArea\n                        className=\"new-address\"\n                        placeholder={\n                          this.state.address\n                            ? \"Update Address\"\n                            : \"Add new address\"\n                        }\n                        rows={4}\n                        value={this.state.newAddress}\n                        onChange={(e) => {\n                          this.setState({\n                            newAddress: e.target.value,\n                          });\n                        }}\n                      />\n                    </div>\n\n                    {/* Button to submit address added */}\n                    <div>\n                      <Button type=\"primary\" onClick={this.addAddress}>\n                        {this.state.address\n                          ? \"Update Address\"\n                          : \"Add new address\"}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                <br></br>\n\n                {/* Display the \"Pricing\" section */}\n                <div>\n                  <h1 style={{ marginBottom: \"-10px\" }}>Pricing</h1>\n\n                  <hr></hr>\n\n                  <h2>Payment Method</h2>\n\n                  <Radio.Group value={1}>\n                    <Radio style={radioStyle} value={1}>\n                      Wallet\n                      <strong> (₹{this.state.balance} available)</strong>\n                    </Radio>\n                  </Radio.Group>\n                </div>\n\n                <br></br>\n\n                {/* Button to confirm order */}\n                <Button\n                  className=\"ant-btn-success\"\n                  loading={this.state.loading}\n                  type=\"primary\"\n                  onClick={this.order}\n                >\n                  <strong>Place Order</strong>\n                </Button>\n              </div>\n            </Col>\n\n            {/* Display the cart */}\n\n            <Col\n              xs={{ span: 24, order: 1 }}\n              md={{ span: 6, order: 2 }}\n              className=\"checkout-cart\"\n            >\n              <div>\n                {this.state.products.length && (\n                  <Cart\n                    ref={this.cartRef}\n                    products={this.state.products}\n                    history={this.props.history}\n                    token={localStorage.getItem(\"token\")}\n                    checkout={true}\n                  />\n                )}\n              </div>\n            </Col>\n          </Row>\n        </div>\n\n        {/* Display the footer */}\n        <Footer></Footer>\n      </>\n    );\n  }\n}\n\nexport default withRouter(Checkout);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}