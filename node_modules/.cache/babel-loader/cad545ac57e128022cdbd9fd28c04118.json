{"ast":null,"code":"var _jsxFileName = \"/Users/hasanshaikh/Documents/GitHub/qkart/frontend/src/components/Login.js\";\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\";\nimport { Button, Input, message } from \"antd\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\n\n/**\n * @class Login component handles the Login page UI and functionality\n *\n * Contains the following fields\n *\n * @property {boolean} state.loading\n *    Indicates background action pending completion. When true, further UI actions might be blocked\n * @property {string}\n *    state.email User given field for user's email\n * @property {string}\n *    state.password User given field for password\n */\nclass Login extends React.Component {\n  constructor() {\n    super();\n    /**\n     * Validate the input values so that any bad or illegal values are not passed to the backend.\n     *\n     * @returns {boolean}\n     *    Whether validation has passed or not\n     *\n     * Return false if any validation condition fails, otherwise return true.\n     * -    Check that email field is not an empty value\n     * -    Check that password field is not an empty value\n     */\n    this.validateInput = () => {\n      if (!this.state.email) {\n        message.error(\"Email is a required field\");\n        return false;\n      }\n      if (!this.state.password) {\n        message.error(\"Password is a required field\");\n        return false;\n      }\n      return true;\n    };\n    /**\n     * Check the response of the API call to be valid and handle any failures along the way\n     *\n     * @param {boolean} errored\n     *    Represents whether an error occurred in the process of making the API call itself\n     * @param {{ success: boolean, message?: string, token?: string, email?: string }} response\n     *    The response JSON object from API call which may contain further success or error messages\n     * @returns {boolean}\n     *    Whether validation has passed or not\n     *\n     * If the API call itself encounters an error, errored flag will be true.\n     * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n     * When there is an error in the API call itself, display a generic error message and return false.\n     * When there is an error returned by backend, display the given message field and return false.\n     * When there is no error and API call is successful, return true.\n     */\n    this.validateResponse = (errored, response) => {\n      if (errored || !response.tokens && !response.message) {\n        message.error(\"Something went wrong. Check that the backend is running, reachable and returns valid JSON.\");\n        return false;\n      }\n      if (!response.tokens) {\n        message.error(response.message);\n        return false;\n      }\n      return true;\n    };\n    /**\n     * Perform the API call over the network and return the response\n     *\n     * @returns {{ success: boolean, token: string, email: string, balance: number }|undefined}\n     *    The response JSON object\n     *\n     * -    Set the loading state variable to true\n     * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n     *      - The call must be made asynchronously using Promises or async/await\n     *      - The call must handle any errors thrown from the fetch call\n     *      - Parse the result as JSON\n     * -    Set the loading state variable to false once the call has completed\n     * -    Call the validateResponse(errored, response) function defined previously\n     * -    If response passes validation, return the response object\n     *\n     * Example for successful response from backend:\n     * HTTP 200\n     * {\n     * \"user\": {\n     *     \"walletMoney\": 500,\n     *     \"address\": \"\",\n     *     \"_id\": \"6005988f06ea6b360cb75747\",\n     *     \"name\": \"user-name\",\n     *     \"email\": \"user-email\",\n     *     \"password\": \"user-pass-enc,\n     *     \"createdAt\": \"timestamp\",\n     *     \"updatedAt\": \"timestamp\",\n     *     \"__v\": 0\n     * },\n     * \"tokens\": {\n     *     \"access\": {\n     *         \"token\": \"user-access-token\",\n     *         \"expires\": \"expity-timestamp\n     *     }\n     * }\n     * }\n     *\n     * Example for failed response from backend:\n     * HTTP 400\n     * {\n     *      \"code\": 400,\n     *      \"message\": \"email is required\"\n     * }\n     */\n    this.performAPICall = async () => {\n      let response = {};\n      let errored = false;\n      this.setState({\n        loading: true\n      });\n      try {\n        response = await (await fetch(`${config.endpoint}/auth/login`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            email: this.state.email,\n            password: this.state.password\n          })\n        })).json();\n      } catch (e) {\n        errored = true;\n      }\n      this.setState({\n        loading: false\n      });\n      if (this.validateResponse(errored, response)) {\n        return response;\n      }\n    };\n    /**\n     * Store the login information so that it can be used to identify the user in subsequent API calls\n     *\n     * @param {string} token\n     *    API token used for authentication of requests after logging in\n     * @param {string} email\n     *    Email of the logged in user\n     * @param {string} balance\n     *    Wallet balance amount of the logged in user\n     *\n     * Make use of localStorage: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n     * -    `token` field in localStorage can be used to store the Oauth token\n     * -    `email` field in localStorage can be used to store the email that the user is logged in as\n     * -    `balance` field in localStorage can be used to store the balance amount in the user's wallet\n     * -    `username` field in localStorage can be used to store the User's name\n     * -    `userId` field in localStorage can be used to store the user ID\n     */\n    this.persistLogin = (token, email, balance, name, userId) => {\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"email\", email);\n      localStorage.setItem(\"balance\", balance);\n      localStorage.setItem(\"username\", name);\n      localStorage.setItem(\"userId\", userId);\n    };\n    /**\n     * Definition for login handler\n     * This is the function that is called when the user clicks on the login button or submits the login form\n     * -    Call the previously defined validateInput() function and check that is returns true, i.e. the input values pass validation\n     * -    Call the previously defined performAPICall() function asynchronously and capture the returned value in a variable\n     * -    If the returned value exists,\n     *      -   Call the previously defined persistLogin(token, email, balance,username,userId) function\n     *      -   Clear the input fields\n     *      -   Display a success message\n     *      -   Redirect the user to the \"/products\" page\n     */\n    /**\n     * Definition for login handler\n     * This is the function that is called when the user clicks on the login button or submits the login form\n     *    - Display a message, \"Login logic not implemented yet\"\n     */\n    this.login = async () => {\n      // if (this.validateInput()) {\n      const response = await this.performAPICall();\n      if (response) {\n        this.persistLogin(response.tokens.access.token, response.user.email, response.user.walletMoney, response.user.name, response.user._id);\n        this.setState({\n          email: \"\",\n          password: \"\"\n        });\n        message.success(\"Logged in successfully\");\n        this.props.history.push(\"/products\");\n      }\n      // }\n    };\n    this.state = {\n      loading: false,\n      email: \"\",\n      password: \"\"\n    };\n  }\n  /**\n   * JSX and HTML goes here\n   * We have a text field and a password field (each with data binding to state), and a submit button that calls login()\n   */\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      history: this.props.history,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-container container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }, \"Login to QKart\"), /*#__PURE__*/React.createElement(Input, {\n      className: \"input-field\",\n      prefix: /*#__PURE__*/React.createElement(UserOutlined, {\n        className: \"site-form-item-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 23\n        }\n      }),\n      placeholder: \"email\",\n      onChange: e => {\n        this.setState({\n          email: e.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Input.Password, {\n      className: \"input-field\",\n      prefix: /*#__PURE__*/React.createElement(LockOutlined, {\n        className: \"site-form-item-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 23\n        }\n      }),\n      placeholder: \"Password\",\n      onChange: e => {\n        this.setState({\n          password: e.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      loading: this.state.loading,\n      type: \"primary\",\n      onClick: this.login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }\n    }, \"Login\"))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n\n// export default Login;\n\nexport default withRouter(Login);","map":{"version":3,"names":["LockOutlined","UserOutlined","Button","Input","message","React","withRouter","config","Footer","Header","Login","Component","constructor","validateInput","state","email","error","password","validateResponse","errored","response","tokens","performAPICall","setState","loading","fetch","endpoint","method","headers","body","JSON","stringify","json","e","persistLogin","token","balance","name","userId","localStorage","setItem","login","access","user","walletMoney","_id","success","props","history","push","render","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","prefix","placeholder","onChange","target","value","Password","type","onClick"],"sources":["/Users/hasanshaikh/Documents/GitHub/qkart/frontend/src/components/Login.js"],"sourcesContent":["import { LockOutlined, UserOutlined } from \"@ant-design/icons\";\nimport { Button, Input, message } from \"antd\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\n\n/**\n * @class Login component handles the Login page UI and functionality\n *\n * Contains the following fields\n *\n * @property {boolean} state.loading\n *    Indicates background action pending completion. When true, further UI actions might be blocked\n * @property {string}\n *    state.email User given field for user's email\n * @property {string}\n *    state.password User given field for password\n */\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      email: \"\",\n      password: \"\",\n    };\n  }\n\n  /**\n   * Validate the input values so that any bad or illegal values are not passed to the backend.\n   *\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * Return false if any validation condition fails, otherwise return true.\n   * -    Check that email field is not an empty value\n   * -    Check that password field is not an empty value\n   */\n  validateInput = () => {\n    if (!this.state.email) {\n      message.error(\"Email is a required field\");\n      return false;\n    }\n    if (!this.state.password) {\n      message.error(\"Password is a required field\");\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Check the response of the API call to be valid and handle any failures along the way\n   *\n   * @param {boolean} errored\n   *    Represents whether an error occurred in the process of making the API call itself\n   * @param {{ success: boolean, message?: string, token?: string, email?: string }} response\n   *    The response JSON object from API call which may contain further success or error messages\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * If the API call itself encounters an error, errored flag will be true.\n   * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n   * When there is an error in the API call itself, display a generic error message and return false.\n   * When there is an error returned by backend, display the given message field and return false.\n   * When there is no error and API call is successful, return true.\n   */\n  validateResponse = (errored, response) => {\n    if (errored || (!response.tokens && !response.message)) {\n      message.error(\n        \"Something went wrong. Check that the backend is running, reachable and returns valid JSON.\"\n      );\n      return false;\n    }\n    if (!response.tokens) {\n      message.error(response.message);\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Perform the API call over the network and return the response\n   *\n   * @returns {{ success: boolean, token: string, email: string, balance: number }|undefined}\n   *    The response JSON object\n   *\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   *      - The call must be made asynchronously using Promises or async/await\n   *      - The call must handle any errors thrown from the fetch call\n   *      - Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateResponse(errored, response) function defined previously\n   * -    If response passes validation, return the response object\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * {\n   * \"user\": {\n   *     \"walletMoney\": 500,\n   *     \"address\": \"\",\n   *     \"_id\": \"6005988f06ea6b360cb75747\",\n   *     \"name\": \"user-name\",\n   *     \"email\": \"user-email\",\n   *     \"password\": \"user-pass-enc,\n   *     \"createdAt\": \"timestamp\",\n   *     \"updatedAt\": \"timestamp\",\n   *     \"__v\": 0\n   * },\n   * \"tokens\": {\n   *     \"access\": {\n   *         \"token\": \"user-access-token\",\n   *         \"expires\": \"expity-timestamp\n   *     }\n   * }\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *      \"code\": 400,\n   *      \"message\": \"email is required\"\n   * }\n   */\n  performAPICall = async () => {\n    let response = {};\n    let errored = false;\n    this.setState({\n      loading: true,\n    });\n    try {\n      response = await (\n        await fetch(`${config.endpoint}/auth/login`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            email: this.state.email,\n            password: this.state.password,\n          }),\n        })\n      ).json();\n    } catch (e) {\n      errored = true;\n    }\n    this.setState({\n      loading: false,\n    });\n    if (this.validateResponse(errored, response)) {\n      return response;\n    }\n  };\n\n  /**\n   * Store the login information so that it can be used to identify the user in subsequent API calls\n   *\n   * @param {string} token\n   *    API token used for authentication of requests after logging in\n   * @param {string} email\n   *    Email of the logged in user\n   * @param {string} balance\n   *    Wallet balance amount of the logged in user\n   *\n   * Make use of localStorage: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n   * -    `token` field in localStorage can be used to store the Oauth token\n   * -    `email` field in localStorage can be used to store the email that the user is logged in as\n   * -    `balance` field in localStorage can be used to store the balance amount in the user's wallet\n   * -    `username` field in localStorage can be used to store the User's name\n   * -    `userId` field in localStorage can be used to store the user ID\n   */\n  persistLogin = (token, email, balance, name, userId) => {\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"email\", email);\n    localStorage.setItem(\"balance\", balance);\n    localStorage.setItem(\"username\", name);\n    localStorage.setItem(\"userId\", userId);\n  };\n\n  /**\n   * Definition for login handler\n   * This is the function that is called when the user clicks on the login button or submits the login form\n   * -    Call the previously defined validateInput() function and check that is returns true, i.e. the input values pass validation\n   * -    Call the previously defined performAPICall() function asynchronously and capture the returned value in a variable\n   * -    If the returned value exists,\n   *      -   Call the previously defined persistLogin(token, email, balance,username,userId) function\n   *      -   Clear the input fields\n   *      -   Display a success message\n   *      -   Redirect the user to the \"/products\" page\n   */\n\n  /**\n   * Definition for login handler\n   * This is the function that is called when the user clicks on the login button or submits the login form\n   *    - Display a message, \"Login logic not implemented yet\"\n   */\n\n  login = async () => {\n    // if (this.validateInput()) {\n    const response = await this.performAPICall();\n    if (response) {\n      this.persistLogin(\n        response.tokens.access.token,\n        response.user.email,\n        response.user.walletMoney,\n        response.user.name,\n        response.user._id\n      );\n      this.setState({\n        email: \"\",\n        password: \"\",\n      });\n      message.success(\"Logged in successfully\");\n      this.props.history.push(\"/products\");\n    }\n    // }\n  };\n\n  /**\n   * JSX and HTML goes here\n   * We have a text field and a password field (each with data binding to state), and a submit button that calls login()\n   */\n  render() {\n    return (\n      <>\n        {/* Display Header */}\n        <Header history={this.props.history} />\n\n        {/* Display Login fields */}\n        <div className=\"flex-container\">\n          <div className=\"login-container container\">\n            <h1>Login to QKart</h1>\n\n            <Input\n              className=\"input-field\"\n              prefix={<UserOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"email\"\n              onChange={(e) => {\n                this.setState({\n                  email: e.target.value,\n                });\n              }}\n            />\n\n            <Input.Password\n              className=\"input-field\"\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\n              placeholder=\"Password\"\n              onChange={(e) => {\n                this.setState({\n                  password: e.target.value,\n                });\n              }}\n            />\n\n            <Button\n              loading={this.state.loading}\n              type=\"primary\"\n              onClick={this.login}\n            >\n              Login\n            </Button>\n          </div>\n        </div>\n\n        {/* Display the footer */}\n        <Footer></Footer>\n      </>\n    );\n  }\n}\n\n// export default Login;\n\nexport default withRouter(Login);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}